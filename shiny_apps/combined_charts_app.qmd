---
title: "Untitled"
format: html
editor: visual
---

This is a shiny app that combines the line and bar charts in one app where you can select the company that you want to look at from a dropdown box.

```{r}
library(shiny)
library(rAmCharts4)
library(dplyr)
library(ggplot2)
library(lubridate)
library(readxl)

# Load data from Excel file
dat <- read_excel("data/tech_layoffs.xlsx")

# Convert the Date_layoffs column to a Date class without the time component
dat$Date_layoffs <- as.Date(dat$Date_layoffs)

# UI
ui <- fluidPage(
  br(),
  fluidRow(
    column(
      width = 4,
      selectInput("selectedCompany", "Select Company", choices = unique(dat$Company))
    ),
    column(
      width = 4,
      tags$fieldset(
        tags$legend("Company Size After Layoffs"),
        verbatimTextOutput("Company_Size_after_Layoffs"),
        amChart4Output("linechart", height = "600px", width = "900px"),
        amChart4Output("barchart", height = "500px", width = "600px")
      ),
      tags$fieldset(
        tags$legend("Change"),
        verbatimTextOutput("chartChange")
      )
    )
  )
)

# Server
server <- function(input, output){

  output[["linechart"]] <- renderAmChart4({
    selectedCompanyData <- dat[dat$Company == input$selectedCompany, ]
    
    amLineChart(
      data = selectedCompanyData,
      xValue = "Date_layoffs",
      yValues = "Company_Size_after_layoffs",
      draggable = FALSE,
      chartTitle = amText(
        text = paste("Company Size After Layoffs -", input$selectedCompany),
        color = "crimson",
        fontWeight = "bold",
        fontFamily = "cursive"
      ),
      xAxis = list(
        title = "Date",
        labels = amAxisLabels(rotation = -90),
        breaks = amAxisBreaks(timeInterval = "1 month")
      ),
      yAxis = "Company Size",
      yLimits = c(0, max(selectedCompanyData$Company_Size_after_layoffs) + 5),
      backgroundColor = "whitesmoke",
      tooltip = "[bold][font-style:italic]{dateX}[/]\nCompany Size: {valueY}[/]",
      Yformatter = "#",
      caption = amText(
        text = "[bold font-size:22]Company Size After Layoffs Over Time[/]",
        color = "fuchsia"
      ),
      button = amButton(
        label = amText("Reset data", color = "black"),
        color = "seashell",
        position = 0.95
      ),
      theme = "dataviz"
    )
  })

  output[["Company_Size_after_Layoffs"]] <- renderPrint({
    selectedCompanyData <- dat[dat$Company == input$selectedCompany, ]
    summary(selectedCompanyData$Company_Size_after_layoffs)
  })

  output[["barchart"]] <- renderAmChart4({
    data1 <- dat %>%
      filter(Company == input$selectedCompany)

    amBarChart(
      data = data1,
      category = "Date_layoffs",
      values = "Percentage",
      draggable = FALSE,
      chartTitle = amText(text = paste("Percentage laid off - ", input$selectedCompany), fontSize = 22, color = "orangered"),
      width = NULL,
      height = "500px",
      xAxis = list(
        title = amText(text = "Date", color = "maroon"),
        labels = amAxisLabels(rotation = -45),
        breaks = amAxisBreaks(timeInterval = "1 month")
      ),
      yAxis = list(
        title = amText(text = "Layoffs", color = "maroon"),
        labelRotation = 90,
        gridLines = amLine(color = "orange", width = 1, opacity = 0.4)
      ), 
      valueFormatter = "#,###.",
      caption = amText(text = " ", color = "red"),
      theme = "dataviz"
    )
  })

  output[["chartChange"]] <- renderPrint({
    input[["linechart_change"]]
  })

}

shinyApp(ui, server)
```

```{r}
library(shiny)
library(rAmCharts4)
library(dplyr)
library(ggplot2)
library(lubridate)
library(readxl)

# Load data from Excel file
dat <- read_excel("data/tech_layoffs.xlsx")

# Convert the Date_layoffs column to a Date class without the time component
dat$Date_layoffs <- as.Date(dat$Date_layoffs)

# UI
ui <- fluidPage(
  br(),
  fluidRow(
    column(
      width = 4,
      selectInput("selectedCompany", "Select Company", choices = unique(dat$Company))
    ),
    column(
      width = 4,
      checkboxGroupInput("selectedChartTypes", "Select Chart Types to Display",
                         choices = c("Line Chart", "Bar Chart"),
                         selected = c("Line Chart", "Bar Chart")
      ),
      tags$fieldset(
        tags$legend("Company Size After Layoffs"),
        verbatimTextOutput("Company_Size_after_Layoffs"),
        conditionalPanel(
          condition = "input.selectedChartTypes.indexOf('Line Chart') != -1",
          amChart4Output("linechart", height = "600px", width = "900px")
        ),
        conditionalPanel(
          condition = "input.selectedChartTypes.indexOf('Bar Chart') != -1",
          amChart4Output("barchart", height = "500px", width = "600px")
        ),
        actionButton("resetButton", "Reset data")
      ),
      tags$fieldset(
        tags$legend("Change"),
        verbatimTextOutput("chartChange")
      )
    )
  )
)

# Server
server <- function(input, output){
  
  resetButtonClicked <- reactiveVal(0)
  
  observeEvent(input$resetButton, {
    resetButtonClicked(isolate(resetButtonClicked()) + 1)
  })

  output[["linechart"]] <- renderAmChart4({
    if ("Line Chart" %in% input$selectedChartTypes) {
      selectedCompanyData <- dat[dat$Company == input$selectedCompany, ]

      amLineChart(
        data = selectedCompanyData,
        xValue = "Date_layoffs",
        yValues = "Company_Size_after_layoffs",
        draggable = FALSE,
        chartTitle = amText(
          text = paste("Company Size After Layoffs -", input$selectedCompany),
          color = "crimson",
          fontWeight = "bold",
          fontFamily = "cursive"
        ),
        xAxis = list(
          title = "Date",
          labels = amAxisLabels(rotation = -90),
          breaks = amAxisBreaks(timeInterval = "1 month")
        ),
        yAxis = "Company Size",
        yLimits = c(0, max(selectedCompanyData$Company_Size_after_layoffs) + 5),
        backgroundColor = "whitesmoke",
        tooltip = "[bold][font-style:italic]{dateX}[/]\nCompany Size: {valueY}[/]",
        Yformatter = "#",
        caption = amText(
          text = "[bold font-size:22]Company Size After Layoffs Over Time[/]",
          color = "fuchsia"
        ),
        button = if (resetButtonClicked() > 0) {
          amButton(
            label = amText("Reset data", color = "black"),
            color = "seashell",
            position = 0.95
          )
        },
        theme = "dataviz"
      )
    }
  })

  output[["Company_Size_after_Layoffs"]] <- renderPrint({
    selectedCompanyData <- dat[dat$Company == input$selectedCompany, ]
    summary(selectedCompanyData$Company_Size_after_layoffs)
  })

  output[["barchart"]] <- renderAmChart4({
    if ("Bar Chart" %in% input$selectedChartTypes) {
      data1 <- dat %>%
        filter(Company == input$selectedCompany)

      amBarChart(
        data = data1,
        category = "Date_layoffs",
        values = "Percentage",
        draggable = FALSE,
        chartTitle = amText(text = paste("Percentage laid off - ", input$selectedCompany), fontSize = 22, color = "orangered"),
        width = NULL,
        height = "500px",
        xAxis = list(
          title = amText(text = "Date", color = "maroon"),
          labels = amAxisLabels(rotation = -45),
          breaks = amAxisBreaks(timeInterval = "1 month")
        ),
        yAxis = list(
          title = amText(text = "Layoffs as percent of company", color = "maroon"),
          labelRotation = 90,
          gridLines = amLine(color = "orange", width = 1, opacity = 0.4)
        ), 
        valueFormatter = "#,###.",
        caption = amText(text = " ", color = "red"),
        theme = "dataviz"
      )
    }
  })

  output[["chartChange"]] <- renderPrint({
    input[["linechart_change"]]
  })

}

shinyApp(ui, server)

```

```{r}
library(shiny)
library(rAmCharts4)
library(dplyr)
library(ggplot2)
library(lubridate)
library(readxl)

# Load data from Excel file
dat <- read_excel("data/tech_layoffs.xlsx")

# Convert the Date_layoffs column to a Date class without the time component
dat$Date_layoffs <- as.Date(dat$Date_layoffs)

# UI
ui <- fluidPage(
  br(),
  fluidRow(
    column(
      width = 4,
      selectInput("selectedCompany", "Select Company", choices = unique(dat$Company))
    ),
    column(
      width = 4,
      checkboxGroupInput("selectedChartTypes", "Select Chart Types to Display",
                         choices = c("Line Chart", "Bar Chart"),
                         selected = c("Line Chart", "Bar Chart")
      ),
      conditionalPanel(
        condition = "input.selectedChartTypes.indexOf('Line Chart') != -1",
        tags$fieldset(
          tags$legend("Line Chart Settings"),
          selectInput("selectedYVariableLine", "Select Y-Axis Variable for Line Chart",
                      choices = c("Percentage", "Laid_Off", "Company_Size_before_Layoffs", "Company_Size_after_layoffs"),
                      selected = "Percentage"
          )
        )
      ),
      conditionalPanel(
        condition = "input.selectedChartTypes.indexOf('Bar Chart') != -1",
        tags$fieldset(
          tags$legend("Bar Chart Settings"),
          selectInput("selectedYVariableBar", "Select Y-Axis Variable for Bar Chart",
                      choices = c("Percentage", "Laid_Off", "Company_Size_before_Layoffs", "Company_Size_after_layoffs"),
                      selected = "Percentage"
          )
        )
      ),
      tags$fieldset(
        tags$legend("Company Size After Layoffs"),
        verbatimTextOutput("Company_Size_after_Layoffs"),
        conditionalPanel(
          condition = "input.selectedChartTypes.indexOf('Line Chart') != -1",
          amChart4Output("linechart", height = "600px", width = "800px")
        ),
        conditionalPanel(
          condition = "input.selectedChartTypes.indexOf('Bar Chart') != -1",
          amChart4Output("barchart", height = "500px", width = "800px")
        ),
        actionButton("resetButton", "Reset data")
      ),
      tags$fieldset(
        tags$legend("Change"),
        verbatimTextOutput("chartChange")
      )
    )
  )
)

# Server
server <- function(input, output){
  
  resetButtonClicked <- reactiveVal(0)
  
  observeEvent(input$resetButton, {
    resetButtonClicked(isolate(resetButtonClicked()) + 1)
  })

  output[["linechart"]] <- renderAmChart4({
    if ("Line Chart" %in% input$selectedChartTypes) {
      selectedCompanyData <- dat[dat$Company == input$selectedCompany, ]

      amLineChart(
        data = selectedCompanyData,
        xValue = "Date_layoffs",
        yValues = input$selectedYVariableLine,
        draggable = FALSE,
        chartTitle = amText(
          text = paste("Company Size After Layoffs -", input$selectedCompany),
          color = "crimson",
          fontWeight = "bold",
          fontFamily = "cursive"
        ),
        xAxis = list(
          title = amText(text = "Date", color = "maroon"),
          labels = amAxisLabels(rotation = -90),
          breaks = amAxisBreaks(timeInterval = "1 month")
        ),
        yAxis = input$selectedYVariableLine,
        yLimits = c(0, max(selectedCompanyData[[input$selectedYVariableLine]]) + 5),
        backgroundColor = "whitesmoke",
        tooltip = "[bold][font-style:italic]{dateX}[/]\n{selectedYVariableLine}: {valueY}[/]",
        Yformatter = "#",
        caption = amText(
          text = "[bold font-size:22]Company Size After Layoffs Over Time[/]",
          color = "fuchsia"
        ),
        button = if (resetButtonClicked() > 0) {
          amButton(
            label = amText("Reset data", color = "black"),
            color = "seashell",
            position = 0.95
          )
        },
        theme = "dataviz"
      )
    }
  })

  output[["Company_Size_after_Layoffs"]] <- renderPrint({
    selectedCompanyData <- dat[dat$Company == input$selectedCompany, ]
    summary(selectedCompanyData[[input$selectedYVariableLine]])
  })

  output[["barchart"]] <- renderAmChart4({
    if ("Bar Chart" %in% input$selectedChartTypes) {
      data1 <- dat %>%
        filter(Company == input$selectedCompany)

      amBarChart(
        data = data1,
        category = "Date_layoffs",
        values = input$selectedYVariableBar,  # Use the selected variable for values
        draggable = FALSE,
        chartTitle = amText(text = paste(input$selectedYVariableBar, " - ", input$selectedCompany), fontSize = 22, color = "orangered"),
        width = NULL,
        height = "500px",
        xAxis = list(
          title = amText(text = "Date", color = "maroon"),
          labels = amAxisLabels(rotation = -45),
          breaks = amAxisBreaks(timeInterval = "1 month")
        ),
        yAxis = list(
          title = amText(text = input$selectedYVariableBar, color = "maroon"),
          labelRotation = 90
        ),
        valueFormatter = "#,###.",
        caption = amText(text = " ", color = "red"),
        theme = "dataviz"
      )
    }
  })

  output[["chartChange"]] <- renderPrint({
    input[["linechart_change"]]
  })

}

shinyApp(ui, server)

```
